#+TITLE: 2.2.1
* 2.2.1 Representing Sequences
** Ex. 2.17
Define ~last-pair~, which returns the list containing the last pair of the
provided list.
#+BEGIN_SRC scheme :exports both :session
(define (last-pair list)
  (if (null? (cdr list))
      list
      (last-pair (cdr list))))
(last-pair (list 23 72 149 34))
#+END_SRC

#+RESULTS:
| 34 |
** Ex. 2.18
Define ~reverse~, which takes a list as an argument and returns a new list with
the same elements in reverse order.
#+BEGIN_SRC scheme :exports both :session
(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) (append (cdr list1) list2))))

(define (reverse toreverse)
  (if (null? toreverse)
      toreverse
      (append (reverse (cdr toreverse)) (list (car toreverse)))))
(reverse (list 1 2 3 4))
#+END_SRC

#+RESULTS:
| 4 | 3 | 2 | 1 |
