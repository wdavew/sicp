#+TITLE: 2.2.3 Sequences as Conventional Interfaces

* Problems
** Ex. 2.33
We start by defining the basic list-manipulation operations, but written as
accumulations.

Accumulate uses a provided procedure to combine all of the elements of a list
given an initial value.

#+BEGIN_SRC scheme :session
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
#+END_SRC

#+RESULTS:
: #<unspecified>

To define map, we combine the result of applying the mapping procedure to the
first element of the list with the rest of the accumulated list.
#+BEGIN_SRC scheme :exports both :session
(define (map p sequence)
  (accumulate
   (lambda (x y) (cons (p x) y))
   #nil
   sequence))

(map (lambda (x) (* x 2)) (list 1 2 3 4))
#+END_SRC

#+RESULTS:
| 2 | 4 | 6 | 8 |

For append, we just use ~cons~ as our combining procedure. By using ~seq2~ as
the initial value, we recursively ~cons~ the first element of ~seq1~ with the rest of the
accumulated result, ending with ~seq2~.
#+BEGIN_SRC scheme :exports both :session
(define (append seq1 seq2)
  (accumulate cons seq2 seq1))

(append (list 1 2 3 4) (list 5 6 7 8))
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |

To define ~length~ we just need a combining procedure that simply counts from 0,
so we use a procedure that ignores the first argument and just increments the
second. This way, we just continuously add 1 to the accumulated result.
#+BEGIN_SRC scheme :exports both :session
(define (length sequence)
  (accumulate  (lambda (x y) (+ y 1)) 0 sequence))
(length (list 1 2 3 4 5))
#+END_SRC

#+RESULTS:
: 5
** Ex. 2.34
Given a polynomial:
\begin{equation*}
a_n x^n + a_{n-1}x^{n-1}+\ldots+a_1x+a_0
\end{equation*}

We can evaluate it using /Horner's Rule/, which reformulates the polynomial as:

\begin{equation*}
(\ldots (a_n x + a_{n-1})x+\ldots+a_1)x+a_0
\end{equation*}

We'll use accumulate to write a procedure to evaluate a polynomial using
Horner's Rule. We represent the polynomial as a list of sequences from $a_0$ to $a_n$.

#+BEGIN_SRC scheme :exports both :session
(define (horner-eval x coefficient-sequence)
  (accumulate (lambda (this-coeff higher-terms) (+ this-coeff (* x higher-terms)))
  0
  coefficient-sequence))

(horner-eval 2 (list 1 3 0 5 0 1))
#+END_SRC

#+RESULTS:
: 79
** Ex. 2.35
Now we can redefine the ~count-leaves~ section from earlier to be in terms of an
accumulation.

To do this, we'll use the ~enumerate-tree~ procedure from this section.
#+BEGIN_SRC scheme :session
(define (enumerate-tree tree)
  (cond ((null? tree) #nil)
        ((not (pair? tree)) (list tree))
        (else (append!
               (enumerate-tree (car tree))
               (enumerate-tree (cdr tree))))))
#+END_SRC

#+RESULTS:
: #<unspecified>

Now that we can enumerate the leaves of the tree, we can just map each leaf to
the value 1 and accumulate them into a sum to get a count of the leaves.

#+BEGIN_SRC scheme :session :exports both
(define (count-leaves tree)
  (accumulate + 0 (map (lambda (x) 1) (enumerate-tree tree))))

(count-leaves (list
               (list (list 2 3)
                     (list 1 5))
               (list 3 4)))

#+END_SRC

#+RESULTS:
: 6
** Ex. 2.36
~accumulate-n~ takes a nested list of sequences and combines the first elements
of the sequences, the second elements, etc. using the provided combining
procedure. It returns a sequence of the results.

#+BEGIN_SRC scheme :exports both :session
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      #nil
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))

(accumulate-n + 0 (list (list 1 2 3) (list 4 5 6)))
#+END_SRC

#+RESULTS:
| 5 | 7 | 9 |
** Ex. 2.37
We can represent vectors $v = (v_i)$ as sequences of numbers, and matrices $m =
(m_ij)$ as sequences of vectors.


\begin{bmatrix}
1 & 2 & 3 & 4 \\
4 & 5 & 6 & 6 \\
6 & 7 & 8 & 9
\end{bmatrix}

The above matrix be represented as ~((1 2 3 4) (4 5 6 6) (6 7 8 9))~.

Now we'll use sequence operations to express matrix and vector operations.

*** Dot Product
For the dot product, we can use the fact that ~map~ can accept any number of
lists so long as they are the same length. It will apply the procedure
elementwise to each list.

#+BEGIN_SRC scheme :exports both :session
(define (dot-product v w)
  (accumulate + 0 (map * v w))

(dot-product (list 1 2 3) (list 4 5 6))
#+END_SRC

#+RESULTS:
: 32

*** Matrix-vector multiplication
Multiplying a matrix by a column vector can be thought of as mapping the matrix
into a new sequence, where each vector is accumulated into a dot product with
the provided vector.
#+BEGIN_SRC scheme :exports both :session
(define (matrix-*-vector m v)
  (map (lambda (row) (dot-product row v)) m))
(matrix-*-vector (list
                  (list 1 2 3)
                  (list 4 5 6)
                  (list 7 8 9))
                 (list 1 2 3))
#+END_SRC

#+RESULTS:
| 14 | 32 | 50 |

*** Transposition
To transpose a matrix, we need to swap the indices of each element in the
matrix, which means that rows become columns. We can achieve this by combining
the first elements of each row, the second elements of each row, etc. using
~accumulate-n~.
#+BEGIN_SRC scheme :exports both :session
(define (transpose mat)
  (accumulate-n cons #nil mat))
(transpose (list
            (list 1 2 3)
            (list 4 5 6)
            (list 7 8 9)))
#+END_SRC

#+RESULTS:
| 1 | 4 | 7 |
| 2 | 5 | 8 |
| 3 | 6 | 9 |

*** Matrix-matrix multiplication
For matrix-matrix multiplication, we simply need to repeat our matrix-vector
multiplication for each column of the second matrix.
#+BEGIN_SRC scheme :exports both :session
(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (row) (matrix-*-vector cols row)) m)))
(matrix-*-matrix
 (list
  (list 1 2 3)
  (list 4 5 6)
  (list 7 8 9))
 (list
  (list 1 1 1)
  (list 2 3 4)
  (list 3 9 16)))
#+END_SRC

#+RESULTS:
| 14 |  34 |  57 |
| 32 |  73 | 120 |
| 50 | 112 | 183 |
** Ex. 2.38
What we've been referring to as ~accumulate~ is also known as ~fold-right~. It
combines the first element of the sequence with the result of combining
everything to the right of that element. With ~cons~ as the operator, for
example:
#+BEGIN_SRC scheme
(cons 1 (cons 2 (cons 3 (cons 4 #nil))))
#+END_SRC

~fold-left~ also accumulates, but in the other direction:
#+BEGIN_SRC scheme
(cons (cons (cons (cons #nil 1) 2) 3) 4)
#+END_SRC

#+BEGIN_SRC scheme :session
(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest))
              (cdr rest))))
  (iter initial sequence))
#+END_SRC

#+RESULTS:
: #<unspecified>

This should give 3/2 or 1.5:
#+BEGIN_SRC scheme :session
(accumulate / 1 (list 1 2 3))
#+END_SRC

#+RESULTS:
: 3/2

While using fold-left, we should instead see 1/6:

#+BEGIN_SRC scheme :session
(fold-left / 1 (list 1 2 3))
#+END_SRC

#+RESULTS:
: 1/6

With ~list~ and ~fold-right~ / ~accumulate~, our result should be ~(1 (2 (3 #nil)))~:
#+BEGIN_SRC scheme :exports both :session
(accumulate list #nil (list 1 2 3))
#+END_SRC

#+RESULTS:
: '(1 (2 (3 #nil)))

~fold-left~ will instead give ~(((#nil 1) 2) 3)~
#+BEGIN_SRC scheme :exports both :session
(fold-left list #nil (list 1 2 3))
#+END_SRC

#+RESULTS:
: '(((#nil 1) 2) 3)

An operator must be *associative* and *commutative* for the results of ~fold-right~ and
~fold-left~ to be equal in all cases.
** Ex. 2.39
Now we'll use ~fold-left~ and ~fold-right~ to re-implement ~reverse~.
With accumulate, we are combining the ~car~ of our sequence with the result of
accumulating the ~cdr~ of the sequence, so we have to use ~append!~ to keep our
result as a single list.
#+BEGIN_SRC scheme :exports both :session
(define (reverse sequence)
  (accumulate (lambda (x y) (append! y (list x))) #nil sequence))
(reverse (list 1 2 3 4))
#+END_SRC

#+RESULTS:
| 4 | 3 | 2 | 1 |

With ~fold-left~, we apply the operator to the accumulated result and the ~car~ of
the sequence repeatedly. This means we can just repeatedly ~cons~ the result to
the ~car~ of the sequence, which will formed the reversed list.

#+BEGIN_SRC scheme :exports both :session
(define (reverse sequence)
  (fold-left (lambda (x y) (cons y x)) #nil sequence))
(reverse (list 1 2 3 4))
#+END_SRC

#+RESULTS:
| 4 | 3 | 2 | 1 |
