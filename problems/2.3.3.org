#+TITLE: 2.3.3 Representing Sets

* Representing Sets
Choosing a good representation for sets (unordered collecmplement ~union-set~, ~intersection-set~, ~element-of-set?~, and
~adjoin-set~.

** Unordered Lists
*** ~element-of-set~:
#+BEGIN_SRC scheme :session :exports both
(define (element-of-set? x set)
  (cond ((null? set) #false)
        ((= x (car set)) #true)
        (else (element-of-set? x (cdr set)))))

(element-of-set? 3 '(1 2 3 4 5))
#+END_SRC

#+RESULTS:
: #t

*** ~adjoin-set~:
#+BEGIN_SRC scheme :session :exports both
(define (adjoin-set x set)
  (if (element-of-set? x set)
      set
      (cons x set)))

(adjoin-set 6 '(1 2 3 4 5))
#+END_SRC

#+RESULTS:
| 6 | 1 | 2 | 3 | 4 | 5 |

*** ~intersection-set~:
#+BEGIN_SRC scheme :session :exports both
(define (intersection-set a b)
  (cond ((or (null? a) (null? b)) '())
        ((element-of-set? (car a) b)
         (cons (car a) (intersection-set (cdr a) b)))
        (else (intersection-set (cdr a) b))))
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |


Theese implementations aren't very efficient. ~element-of-set~ does a full scan
of the list to search for a given element, so its time complexity is O(n),
making the complexity of intersection and union-set O(n^2).

*** Ex. 2.59
**** ~union-set~
#+BEGIN_SRC scheme :session :exports both
(define (union-set a b)
  (cond ((null? a) b)
        ((element-of-set? (car a) b)
         (union-set (cdr a) b))
        (else (cons (car a) (union-set (cdr a) b)))))
#+END_SRC

#+RESULTS:
| 4 | 1 | 3 |

*** Ex. 2.60
Now we redefine the representations allowing for duplicate elements:
#+BEGIN_SRC scheme :session :exports both
(define (element-of-set? a set)
  (cond ((null? set) #false)
        ((equal? a (car set)) #true)
        (else (element-of-set? a (cdr set)))))

(define (adjoin-set a set)
  (cons a set))

(define (intersection-set a b)
  (cond ((or (null? a) (null? b)) '())
        ((element-of-set? (car a) b)
         (adjoin-set (car a) (intersection-set (cdr a) b)))
        (else (intersection-set (cdr a) b))))

(define (union-set a b)
  (if (null? a)
      b
      (union-set (cdr a) (adjoin-set (car a) b))))

(union-set '(1 2 3) '(1 2 3 3 4))
#+END_SRC

#+RESULTS:
| 3 | 2 | 1 | 1 | 2 | 3 | 3 | 4 |

If we don't care about duplicates, the ~union-set~ procedure can now run in O(n)
time (because we don't have to check if the element already exists first).

** Ordered Lists
A second representation is an ordered list. This reduces the number of steps in
~element-of-set~ by a factor of two, although it still has O(n) growth. It does
however reduce ~intersection-set~ to O(n) time complexity since we can produce
the intersection of two sets by performing a single scan of each.


#+BEGIN_SRC scheme :session :exports both
(define (element-of-set? x set)
  (cond ((null? set) #false)
        ((= x (car set)) #true)
        ((< x (car set)) #false)
        (else (element-of-set? x (cdr set)))))

(define (intersection-set a b)
  (if (or (null? a) (null? b))
      '()
      (let ((x1 (car a)) (x2 (car b)))
        (cond ((= x1 x2) (cons x1 (intersection-set (cdr a) (cdr b))))
              ((< x1 x2) (intersection-set (cdr a) b))
              ((> x1 x2) (intersection-set a (cdr b)))))))

(intersection-set '(1 2 3) '(2 3))

#+END_SRC

#+RESULTS:
| 2 | 3 |

*** Ex. 2.61
First we redefine ~adjoin-set~ in a way similar to how we defined ~element-of-set?~:
#+BEGIN_SRC scheme :session :exports both
(define (adjoin-set a set)
  (cond ((null? set) (list a))
        ((equal? a (car set)) set)
        ((< a (car set)) (cons a set))
        (else (cons (car set) (adjoin-set a (cdr set))))))

(adjoin-set 3 '(2 4 6))
#+END_SRC

#+RESULTS:
| 2 | 3 | 4 | 6 |

*** Ex. 2.62
Now we redefine ~union-set~. This implementation runs in O(n) time.
#+BEGIN_SRC scheme :session :exports both
(define (union-set a b)
  (cond ((and (null? a) (null? b)) '())
        ((null? b) a)
        ((null? a) b)
        (else
         (let ((x1 (car a)) (x2 (car b)))
            (cond ((= x1 x2) (cons x1 (union-set (cdr a) (cdr b))))
                  ((< x1 x2) (cons x1 (union-set (cdr a) b)))
                  (else (cons x2 (union-set a (cdr b)))))))))


(union-set '(2 7) '(1 3 4 6))
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 | 6 | 7 |

** Binary Trees
Assuming the tree is balanced, a binary tree will allow us to bring
~element-set~ to O(log(n)) time.

*** Tree representation
#+BEGIN_SRC scheme :exports both :session
(define (entry-tree tree)
  (car tree))

(define (left-branch-tree tree)
  (cadr tree))

(define (right-branch-tree tree)
  (caddr tree))

(define (make-tree entry left right)
  (list entry left right))
#+END_SRC

#+RESULTS:
: #<unspecified>

*** Finding an element in a set using the tree
#+BEGIN_SRC scheme :exports both :session
(define (element-of-set? x set)
  (cond ((null? set) #false)
        ((= x (entry-tree set)) #true)
        ((< x (entry-tree set)) (element-of-set? x (left-branch-tree set)))
        (else (element-of-set? x (right-branch-tree set)))))
#+END_SRC

#+RESULTS:
: #<unspecified>

*** Adjoining to a set
#+BEGIN_SRC scheme :exports both :session
(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
        ((= x (entry-tree set)) set)
        ((< x (entry-tree set))
         (make-tree
          (entry-tree set)
          (adjoin-set x (left-branch-tree set))
          (right-branch-tree set)))
        (else
         (make-tree
          (entry-tree set)
          (left-branch-tree set)
          (adjoin-set x (right-branch-tree set))))))
#+END_SRC

#+RESULTS:
: #<unspecified>

This works if our tree is balanced, but we'll be back at O(n) growth if it's
highly unbalanced.

*** Ex. 2.63
Here are two procedures for converting a tree to a list:

#+BEGIN_SRC scheme :session
(define (tree->list-1 tree)
  (if (null? tree)
      '()
      (append
       (tree->list-1 (left-branch-tree tree))
       (cons (entry-tree tree) (tree->list-1 (right-branch-tree tree))))))

(define (tree->list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list
         (left-branch-tree tree)
         (cons (entry-tree tree)
               (copy-to-list
                (right-branch-tree tree)
                result-list)))))
  (copy-to-list tree '()))

(define (test-tree)
  (make-tree
   7
   (make-tree
    3
    (make-tree
     1
     '()
     '())
    (make-tree
     5
     '()
     '()))
   (make-tree
    9
    '()
    (make-tree
     11
     '()
     '()))))

(define (test-tree-2)
  (make-tree
   3
   (make-tree
    1
    '()
    '())
   (make-tree
    7
    (make-tree
     5
     '()
     '())
    (make-tree
     9
     '()
     (make-tree
      11
      '()
      '())))))


(equal? (tree->list-1 (test-tree-2)) (tree->list-2 (test-tree-2)))
#+END_SRC

#+RESULTS:
: #t

These procedures both produce the same lists given any valid binary tree.
However, the order of growth is different. The second procedure just calls
~cons~ at each node of the tree, while the first one uses ~append~. Append has
to scan through an entire sublist, making it an O(n) operation. The size of the
sublists it's appending, though, are reduced by a factor of two each time. So in
total the time complexity of the first procedure should be O(nlog(n)), and the
second O(n).
*** Ex. 2.64
This procedure forms a balanced binary tree given an ordered list of elements.
#+BEGIN_SRC scheme :exports both :session
(define (list->tree-elements elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elements (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elements))
                  (right-result (partial-tree (cdr non-left-elements) right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elements (cdr right-result)))
                (cons
                 (make-tree this-entry left-tree right-tree)
                 remaining-elements))))))))

(partial-tree '(1 2 3 4 5) 0)
#+END_SRC

#+RESULTS:
| (1 nil nil) | 2 | 3 | 4 | 5 |

This procedure splits the list into three pieces -- the result of recursively
calling the procedure on the left half, the midpoint, and the result of
recursively calling the procedure on the right half. The results are combined to
form a balanced binary tree.

This is an O(n) time procedure sinc eit just has to visit each element of the
list once to form the tree.

*** Ex. 2.65
Now we can give implementions of ~union-set~ and ~intersection-set~ for sets
represented with binary trees.

#+BEGIN_SRC scheme :session :exports both
(define (union-set-tree a b)
  (let ((list-a (tree->list-2 a))
        (list-b (tree->list-2 b)))
    (let ((union-list (union-set list-a list-b)))
      (list->tree-elements union-list))))

(tree->list-2 (union-set-tree (list->tree-elements '(1 2 3 4 5)) (list->tree-elements '(5 6 7 8))))
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |

*** Ex. 2.6.6
If we think about a database, we could use sets to retrieve items. Given a
selector ~key~, we can define a ~lookup~ procedure similar to ~element-of-set?~
that uses the key to find an existing record or return false if no such record
exists.

The initial database could be implemented with a representation of sets based on
underfeed lists to keep things simple, and then later moved to another
representation that uses binary trees. If the actual database procedures are
limited to working with selectors and constructors, then we can change the
representation without affecting those procedures.

Here is the ~lookup~ procedure for the case where we've implemented sets as
binary trees:

#+BEGIN_SRC scheme :session :exports both
(define (make-record key record)
  (cons key record))

(define (key record)
  (car record))

(define (data record)
  (cdr record))

(define (test-db)
  (list
   (make-record 1 "a")
   (make-record 2 "b")
   (make-record 3 "b")
   (make-record 4 "c")
   (make-record 5 "d")
   (make-record 6 "e")
   (make-record 7 "f")))

(define (lookup k db)
  (if (or (null? db) (null? (entry-tree db)))
      #false
      (cond ((= k (key (entry-tree db)))
             (data (entry-tree db)))
            ((< k (key (entry-tree db)))
             (lookup k (left-branch-tree db)))
            (else (lookup k (right-branch-tree db))))))

(lookup 6 (list->tree-elements (test-db)))
#+END_SRC

#+RESULTS:
: e
